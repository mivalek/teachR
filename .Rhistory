marking_path <- "marking/AnD/2019-20"
canvas_token <- "12049~qYWXCdYCGvsTFY7K5M8UP7Vb23CwEH1wk2GKcJqbXF3Nja3QUg7G2Ksr6dBscIN9"
and_id <- 9242
report_id <- 25272
ss <- googlesheets4::gs4_get(google_sheet_id)
getwd()
devtools::document()
res <- function(study = NA, cand_no = candidate_number) {
`%>%` <- magrittr::`%>%`
if (study == "red") {
data <- adata::red_data(cand_no, mark = T)
groups <- c("control", "experimental")
typo_cond <- grep(paste(groups, collapse = "|"), unique(data$condition),
invert = T, value = T)
out <- list(
rem_age_na = sum(is.na(data$age)),
rem_age_typo = 1,
rem_age_young = sum(as.numeric(data$age) < 18, na.rm = T)
)
data$condition[data$condition == typo_cond] <- groups[which.min(adist(typo_cond, groups))]
data <- data %>%
dplyr::mutate(condition = droplevels(condition),
age = as.numeric(age),
rating = (item_1 + item_2 + item_3)/3) %>%
dplyr::filter(!is.na(age) & age > 17)
out$n_clean = nrow(data)
out$cond_desc <- data %>%
dplyr::group_by(condition) %>%
dplyr::summarise(n = dplyr::n(),
age_m = mean(age),
sd_age = sd(age),
min_age = min(age),
max_age = max(age),
rating_m = mean(rating),
rating_sd = sd(rating)) %>%
dplyr::mutate_if(is.numeric, round, 2)
out$cond_desc_tab <- out$cond_desc[ , c(1:3, 7)] %>%
dplyr::mutate(condition = dplyr::recode(
condition, "control" = "Control", "experimental" = "Experim")) %>%
knitr::kable(col.names = c("Group", "<em>N</em>",
"<em>M</em><sub>age</sub>", "<em>M</em><sub>rating</sub>"),
escape = F) %>%
kableExtra::kable_styling(full_width = F, position = "left")
out$result <- t.test(rating ~ condition, data, var.equal = T)
} else if (study == "green") {
data <- adata::green_data(cand_no, mark = T)
groups <- c("control", "experimental")
typo_cond <- grep(paste(groups, collapse = "|"), unique(data$condition),
invert = T, value = T)
typo_age <- grep("[A-z]", data$age, value = T)
correct_age <- na.omit(
unique(as.numeric(
data$age[data$id == data$id[which(data$age == typo_age)]]
))
)
out <- list(
rem_age_na = sum(is.na(data$age)/3)
)
data$condition[data$condition == typo_cond] <- groups[which.min(adist(typo_cond, groups))]
data$age[which(data$age == typo_age)] <- correct_age
out$rem_age_young = sum(as.numeric(data$age < 18), na.rm = T)/3
data <- data %>%
dplyr::mutate(condition = droplevels(condition),
age = as.numeric(age)) %>%
dplyr::filter(!is.na(age) & age > 17)
out$n_clean = nrow(data)/3
out$gen_desc <- data %>%
dplyr::group_by(gender) %>%
dplyr::summarise(n = dplyr::n()/3,
age_m = mean(age),
sd_age = sd(age),
min_age = min(age),
max_age = max(age),
perc_green = round(prop.table(table(selection))["green"] * 100, 2)) %>%
dplyr::mutate_if(is.numeric, round, 2)
out$cond_desc <- data %>%
dplyr::group_by(condition) %>%
dplyr::summarise(n = dplyr::n()/3,
age_m = mean(age),
sd_age = sd(age),
min_age = min(age),
max_age = max(age),
perc_green = round(prop.table(table(selection))["green"] * 100, 2)) %>%
dplyr::mutate_if(is.numeric, round, 2)
out$gen_desc_tab <- out$gen_desc[ , c(1:3, 7)] %>%
dplyr::mutate(gender = stringr::str_to_sentence(gender)) %>%
knitr::kable(col.names = c("Gender", "<em>N</em>",
"<em>M</em><sub>age</sub>", "% green"),
escape = F) %>%
kableExtra::kable_styling(full_width = F, position = "left")
out$cond_desc_tab <- out$cond_desc[ , c(1:3, 7)] %>%
dplyr::mutate(condition = dplyr::recode(
condition, "control" = "Control", "experimental" = "Experim")) %>%
knitr::kable(col.names = c("Group", "<em>N</em>",
"<em>M</em><sub>age</sub>", "% green"),
escape = F) %>%
kableExtra::kable_styling(full_width = F, position = "left")
for (i in levels(data$product)) {
temp <- data[data$product == i, ]
out[[i]] <- chisq.test(table(temp$selection, temp$condition))
}
}
return(out)
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
debud(devtools::document)
debug(devtools::document)
devtools::document()
devtools::document()
devtools::document()
getExportedValue(pkg, name)
devtools::document()
.Internal(Sys.getenv(as.character(x), as.character(unset)))
getwd()
devtools::document()
undebug(devtools::document)
debug(roxygen2::merge.rd_section_minidesc)
debug(roxygen2:::merge.rd_section_minidesc)
devtools::document()
x
y
x$value$type
y$value$type
x$value$type
class(x)
class(y)
c(x$value$label,
y$value$label)
c(x$value$desc, y$value$desc)
x$value$type
rd_section_minidesc(x$value$type, label = c(x$value$label,
y$value$label), desc = c(x$value$desc, y$value$desc))
stopifnot(identical(x$value$type, y$value$type))
x
y
x$value$type
y$value$type)
y$value$type
undebug(roxygen2:::merge.rd_section_minidesc)
devtools::document()
debug(roxygen2:::merge.rd_section_minidesc)
devtools::document()
devtools::document()
x
y
devtools::document()
devtools::document()
debug(roxygen2:::rd_section_minidesc)
devtools::document()
rd_section("minidesc", list(type = type, desc = desc, label = label))
undebug(roxygen2:::rd_section_minidesc)
undebug(roxygen2:::merge.rd_section_minidesc)
debug(roxygen2:::format.rd_section_minidesc)
devtools::document()
undebug(roxygen2:::format.rd_section_minidesc)
version
devtools::document()
devtools::document()
debug(roxygen2:::roxy_tag_parse.roxy_tag_describeIn)
devtools::document()
x
x
x
x
first
second
pieces
x
devtools::document()
x
devtools::document()
devtools::document()
x
x
devtools::document()
devtools::document()
x
x$raw
str_trim(x$raw)
undebug(roxygen2:::roxy_tag_parse.roxy_tag_describeIn)
devtools::document()
id = "C:/work/OneDrive - University of Sussex/marking/AnD/2019-20/Alaa/10714.Rmd"
rmd <- ifelse(grepl("\\.rmd$", id, ignore.case = T), id, paste0(id, ".Rmd"))
rmd
gsub
html <- gsub("rmd$", "html", rev(unlist(strsplit(rmd, "[\\/]")))[1], ignore.case = T)
html
rmd
gsub("^(.*)/.*$", "\\1", rmd)
file.exists()
gsub("^(.*)/.*$", "\\1", 1234)
path <- sub("^(.*)/.*$", "\\1", id)
path
path != id
id <- sub(path, "", id)
id
id = "C:/work/OneDrive - University of Sussex/marking/AnD/2019-20/Alaa/10714.Rmd"
sub("^.*/", "", id)
id <- sub("^.*/", "", id)
rmd <- ifelse(grepl("\\.rmd$", id, ignore.case = T), id, paste0(id, ".Rmd"))
rmd
html <- gsub("rmd$", "html", rev(unlist(strsplit(rmd, "[\\/]")))[1], ignore.case = T)
html
local_html <- file.path(tempdir(), html)
local_html
!file.exists(rmd)
offline_html_path
offline_html_path = "../knitted"
file.path(offline_html_path, html), local_html
file.path(offline_html_path, html)
show.me <- function(id, module = "and", height = "maximize", online = F, url = "https://mivalek.github.io/.../marking/knitted/", offline_html_path = "../knitted") {
module <- ifelse(module == "and", "adata", module)
if (online) {
url <- sub("...", module, url, fixed = T)
} else {
offline_html_path <- ifelse(is.null(offline_html_path), "", offline_html_path)
}
on.exit(setwd(getwd()))
path <- sub("^(.*)/.*$", "\\1", id)
if (path != id) {
setwd(path)
id <- sub("^.*/", "", id)
}
rmd <- ifelse(grepl("\\.rmd$", id, ignore.case = T), id, paste0(id, ".Rmd"))
html <- gsub("rmd$", "html", rev(unlist(strsplit(rmd, "[\\/]")))[1], ignore.case = T)
local_html <- file.path(tempdir(), html)
if (!file.exists(rmd)) stop(paste0("Can't find ", rmd, ". Did you set working directory?"))
if (online) {
download.file(paste0(url, html),
local_html)
} else {
file.copy(file.path(offline_html_path, html), local_html)
}
rstudioapi::navigateToFile(rmd)
rstudioapi::viewer(local_html, height = height)
}
getwd()
show.me <- function(id, module = "and", height = "maximize", online = F, url = "https://mivalek.github.io/.../marking/knitted/", offline_html_path = "../knitted") {
module <- ifelse(module == "and", "adata", module)
if (online) {
url <- sub("...", module, url, fixed = T)
} else {
offline_html_path <- ifelse(is.null(offline_html_path), "", offline_html_path)
}
on.exit(setwd(getwd()))
path <- sub("^(.*)/.*$", "\\1", id)
if (path != id) {
setwd(path)
id <- sub("^.*/", "", id)
}
rmd <- ifelse(grepl("\\.rmd$", id, ignore.case = T), id, paste0(id, ".Rmd"))
html <- gsub("rmd$", "html", rev(unlist(strsplit(rmd, "[\\/]")))[1], ignore.case = T)
local_html <- file.path(tempdir(), html)
if (!file.exists(rmd)) stop(paste0("Can't find ", rmd, ". Did you set working directory?"))
if (online) {
download.file(paste0(url, html),
local_html)
} else {
file.copy(file.path(offline_html_path, html), local_html)
}
rstudioapi::navigateToFile(rmd)
rstudioapi::viewer(local_html, height = height)
}
show.me(id = "C:/work/OneDrive - University of Sussex/marking/AnD/2019-20/Alaa/10714.Rmd")
show.me(id = "C:/work/OneDrive - University of Sussex/marking/AnD/2019-20/Alaa/10714.Rmd")
getwd()
show.me <- function(id, module = "and", height = "maximize", online = F, url = "https://mivalek.github.io/.../marking/knitted/", offline_html_path = "../knitted") {
show.me <- function(id, module = "and", height = "maximize", online = F, url = "https://mivalek.github.io/.../marking/knitted/", offline_html_path = "../knitted") {
module <- ifelse(module == "and", "adata", module)
if (online) {
url <- sub("...", module, url, fixed = T)
} else {
offline_html_path <- ifelse(is.null(offline_html_path), "", offline_html_path)
}
wd_restore <- getwd()
on.exit(setwd(wd_restore))
path <- sub("^(.*)/.*$", "\\1", id)
if (path != id) {
setwd(path)
id <- sub("^.*/", "", id)
}
rmd <- ifelse(grepl("\\.rmd$", id, ignore.case = T), id, paste0(id, ".Rmd"))
html <- gsub("rmd$", "html", rev(unlist(strsplit(rmd, "[\\/]")))[1], ignore.case = T)
local_html <- file.path(tempdir(), html)
if (!file.exists(rmd)) stop(paste0("Can't find ", rmd, ". Did you set working directory?"))
if (online) {
download.file(paste0(url, html),
local_html)
} else {
file.copy(file.path(offline_html_path, html), local_html)
}
rstudioapi::navigateToFile(rmd)
rstudioapi::viewer(local_html, height = height)
}
setwd("C:/work/teachR")
show.me <- function(id, module = "and", height = "maximize", online = F, url = "https://mivalek.github.io/.../marking/knitted/", offline_html_path = "../knitted") {
module <- ifelse(module == "and", "adata", module)
if (online) {
url <- sub("...", module, url, fixed = T)
} else {
offline_html_path <- ifelse(is.null(offline_html_path), "", offline_html_path)
}
wd_restore <- getwd()
on.exit(setwd(wd_restore))
path <- sub("^(.*)/.*$", "\\1", id)
if (path != id) {
setwd(path)
id <- sub("^.*/", "", id)
}
rmd <- ifelse(grepl("\\.rmd$", id, ignore.case = T), id, paste0(id, ".Rmd"))
html <- gsub("rmd$", "html", rev(unlist(strsplit(rmd, "[\\/]")))[1], ignore.case = T)
local_html <- file.path(tempdir(), html)
if (!file.exists(rmd)) stop(paste0("Can't find ", rmd, ". Did you set working directory?"))
if (online) {
download.file(paste0(url, html),
local_html)
} else {
file.copy(file.path(offline_html_path, html), local_html)
}
rstudioapi::navigateToFile(rmd)
rstudioapi::viewer(local_html, height = height)
}
show.me(id = "C:/work/OneDrive - University of Sussex/marking/AnD/2019-20/Alaa/10714.Rmd")
getwd()
devtools::document()
remotes::install_github("mivalek/teachR")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
x <- letters
x <- c(x[1:5], 1:5, x[6:24])
x
getwd()
setwd("../OneDrive - University of Sussex/")
getwd()
devtools::document()
#' Mark coursework assignment Rmd
#'
#' For Rmd submissions of reports and other coursework. Function checks word count and inserts space for feedback.
#'
#' @param csv_path \code{character}. Path or URL of a csv file from which to extract quick comments.
#' @param rubric \code{character}. Sourceable file that produces a rubric list object from which to get colours of buttons so that they match colours of rubric criteria from \code{mark()}. See URL in example.
#' @param output_dir \code{character}. Which study to get correct results for? Currently either \code{"red"} or \code{"green"}.
#' @param warn_col \code{numeric}. Hex code of colour for general comments.
#' @param code_col \code{numeric}. Hex code of colour for comments in code.
#' @param tabbed \code{logical}. Should sections be tabs (\code{TRUE}; default) or FAQ-style buttons (HTML \code{<details>})?
#' @param keep_rmd \code{logical}. Should the source .Rmd file be kept (in working directory)? \code{FALSE} by default.
#' @return Function produces a HTML document saved in \code{output_dir}.
#' @examples
#' get.quick.com(csv_path = "https://docs.google.com/spreadsheets/d/19CXCZk28CQzX4MzQ86a5U-ijYQvP47x0mfX7pQk6KKo/export?gid=588770828&format=csv",
#' rubric = "https://raw.githubusercontent.com/SussexPsychMethods/and_pub/master/marking/sussex_rubric.R",
#' output_dir = "../mivalek_io/adata/marking/")
#' @export get.quick.com
#' @usage get.quick.com(csv_path, rubric, output_dir, warn_col = "#cc0000", code_col = "#b38ed2", tabbed = T, keep_rmd = F)
#'
get.quick.com <- function(csv_path, rubric, output_dir, warn_col = "#cc0000", code_col = "#b38ed2", tabbed = T, keep_rmd = F) {
q_com <- read.csv(csv_path, stringsAsFactors = F)
if (grepl('^http', csv_path)) {
is.url <- T
if (grepl('google.com/spreadsheets', csv_path))
csv_path <- sub('export\\?(.*?)&format=csv', 'edit#\\1', csv_path)
}
source(rubric, local = T)
on.exit(rm(rubric))
colors <- lapply(rubric, function(x)  paste(col2rgb(x$col), collapse=", "))
colors <- c(
paste0("--", names(colors), "-col: ", colors, ";"),
paste0("--warn-col: ", paste(col2rgb(warn_col), collapse=", "), ";"),
paste0("--code-col: ", paste(col2rgb(code_col), collapse=", "), ";")
)
q_com <- q_com[nzchar(q_com$description), ]
criteria <- q_com$description[!nzchar((q_com$text))]
q_com <- q_com %>% dplyr::filter(nzchar(text)) %>%
dplyr::mutate(text = gsub("&", "&amp;", text),
markdown = gsub("&", "&amp;", markdown),
button =  paste0('<button class="btn ', tag,
'" data-clipboard-text="',
gsub('\"', '\'', markdown),
'">Markdown</button>')) %>%
dplyr::select(-markdown) %>%
tidyr::nest(data = c(section, description, text, button))
tabs <- q_com %>%
purrr::pmap(function(tag, data)
data %>%
kableExtra::kable(col.names = c("Section", "Description", "Text", ""), escape = F, align = "lllr", padding = "2px") %>%
kableExtra::column_spec(2, width = "150px") %>%
kableExtra::kable_styling(full_width = T)
)
styles <- c()
for (i in 1:nrow(q_com)) {
styles <- c(
styles,
if (tabbed) {
c(
paste0('.section.', q_com$tag[i], ' {'),
paste0('  border-color: rgb(var(--', q_com$tag[i], '-col));'),
'}',
'',
paste0('.nav-pills > li:nth-child(', i, ') {'),
paste0('  border-color: rgb(var(--', q_com$tag[i], '-col));'),
paste0('  background-color: rgb(var(--', q_com$tag[i], '-col));'),
'}',
'',
paste0('.nav-pills > li:nth-child(', i, '):hover {'),
paste0('  background-color: rgba(var(--', q_com$tag[i], '-col), .3);'),
'}',
paste0('.nav-pills > li:nth-child(', i, ').active > a,'),
paste0('.nav-pills > li:nth-child(', i, ') > a:hover,'),
paste0('.nav-pills > li:nth-child(', i, ').active > a:hover {'),
paste0('  color: rgb(var(--', q_com$tag[i], '-col));'),
'}',
'',
paste0('.btn.', q_com$tag[i], ' {'),
paste0('  background-color: rgb(var(--', q_com$tag[i], '-col));'),
'}'
)
} else {
c(
paste0('details.', q_com$tag[i], ' {'),
paste0('  background-color: rgb(var(--', q_com$tag[i], '-col));'),
'}',
'',
paste0('details.', q_com$tag[i], '[open] > summary {'),
paste0('  color: rgb(var(--', q_com$tag[i], '-col));'),
'}',
'',
paste0('details.', q_com$tag[i], '[open] {'),
paste0('  border-color: rgb(var(--', q_com$tag[i], '-col));'),
'background-color: white;',
'}',
'',
paste0('.btn.', q_com$tag[i], ' {'),
paste0('  background-color: rgb(var(--', q_com$tag[i], '-col));'),
'}'
)
}
)
}
text <- c(
'---',
'pagetitle: "Quick Comments - AnD"',
'output: html_document',
'---',
'',
'<style>',
':root {',
paste("    ", colors),
'}',
'',
'',
styles,
'</style>',
'',
'\\ ',
'',
'\\ ',
'',
if (is.url)
paste0('Please feel free to add to quick comments [here](', csv_path, ').'),
'',
paste0('(Synced with `teachR::get.quick.com()` on ', sub("^0", "", format(Sys.Date(), "%d %B %Y")), '.)'),
'',
'\\ ',
'',
if (tabbed) {
c(
'## \\ {.tabset .tabset-pills}',
'',
'```{r, echo = F, results = "asis"}',
'for (i in 1:nrow(q_com)) {',
'  cat("### ", criteria[i], " {.", q_com$tag[i], "}",','"\n\n",',
'  tabs[[i]],',
'  "\n\n\\ \n\n", sep = "")',
'}',
'```',
''
)
} else {
c(
'```{r, echo = F, results = "asis"}',
'for (i in 1:nrow(q_com)) {',
'  cat("<details class=\\"", q_com$tag[i],"\\"><summary>",',
'      criteria[i],',
'     "</summary>\n",',
'      tabs[[i]],',
'      "\n</details>\n\n\\ \n\n", sep = "")',
'}',
'```'
)
},
'',
'\\ ',
''
)
writeLines(text, "quick_comments.Rmd")
if (!keep_rmd) on.exit(file.remove("quick_comments.Rmd"))
rmarkdown::render("quick_comments.Rmd",
output_format = rmarkdown::html_document(
css = file.path(path.package("teachR"), "quick_com.css"),
includes = rmarkdown::includes(
before_body = file.path(path.package("teachR"), "copyClipboard.js"))),
output_dir = output_dir)
}
rstudioapi::navigateToFile("R/preview.R")
rstudioapi::navigateToFile("R/preview.R")
rstudioapi::navigateToFile("R/get_quick_com.R")
?teachR::make.sheet
